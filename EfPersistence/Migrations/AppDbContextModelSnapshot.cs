// <auto-generated />
using System;
using AnytourApi.EfPersistence.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AnytourApi.EfPersistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AnytourApi.Domain.Models.Enteties.BeachType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.ToTable("BeachTypes");
                });

            modelBuilder.Entity("AnytourApi.Domain.Models.Enteties.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid");

                    b.Property<double>("Latitud")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitud")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("AnytourApi.Domain.Models.Enteties.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("AnytourApi.Domain.Models.Enteties.DietType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("DietTypes");
                });

            modelBuilder.Entity("AnytourApi.Domain.Models.Enteties.ForKid", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.ToTable("ForKids");
                });

            modelBuilder.Entity("AnytourApi.Domain.Models.Enteties.ForSport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.ToTable("ForSports");
                });

            modelBuilder.Entity("AnytourApi.Domain.Models.Enteties.InHotel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.ToTable("InHotels");
                });

            modelBuilder.Entity("AnytourApi.Domain.Models.Enteties.InRoom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.ToTable("InRooms");
                });

            modelBuilder.Entity("AnytourApi.Domain.Models.Enteties.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AdminId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DietTypeId")
                        .HasColumnType("uuid");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FromCityId")
                        .HasColumnType("uuid");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<Guid>("HotelId")
                        .HasColumnType("uuid");

                    b.Property<int>("HowManyAdults")
                        .HasColumnType("integer");

                    b.Property<int>("HowManyKids")
                        .HasColumnType("integer");

                    b.Property<string>("MobilePhoneNumber")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<Guid>("OrderStatusId")
                        .HasColumnType("uuid");

                    b.Property<int>("PriceUSD")
                        .HasColumnType("integer");

                    b.Property<Guid>("RoomTypeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ToCityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TransportationTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("DietTypeId");

                    b.HasIndex("FromCityId");

                    b.HasIndex("HotelId");

                    b.HasIndex("OrderStatusId");

                    b.HasIndex("RoomTypeId");

                    b.HasIndex("ToCityId");

                    b.HasIndex("TransportationTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("AnytourApi.Domain.Models.Enteties.OrderStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.HasKey("Id");

                    b.ToTable("OrderStatuses");
                });

            modelBuilder.Entity("AnytourApi.Domain.Models.Enteties.Photo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Height")
                        .HasColumnType("integer");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<Guid>("PhotoableId")
                        .HasColumnType("uuid");

                    b.Property<int>("Width")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PhotoableId");

                    b.ToTable("Photo");
                });

            modelBuilder.Entity("AnytourApi.Domain.Models.Enteties.ProcessedOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.ToTable("ProcessedOrders");
                });

            modelBuilder.Entity("AnytourApi.Domain.Models.Enteties.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasMaxLength(4096)
                        .HasColumnType("character varying(4096)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ReviewableId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReviewablePhotoableId")
                        .HasColumnType("uuid");

                    b.Property<int>("Score")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ReviewableId");

                    b.HasIndex("ReviewablePhotoableId");

                    b.ToTable("Review");
                });

            modelBuilder.Entity("AnytourApi.Domain.Models.Enteties.RoomType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("RoomTypes");
                });

            modelBuilder.Entity("AnytourApi.Domain.Models.Enteties.TransportationType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.HasKey("Id");

                    b.ToTable("TransportationType");
                });

            modelBuilder.Entity("AnytourApi.Domain.Models.Relations.BeachTypeHotel", b =>
                {
                    b.Property<Guid>("FirstId")
                        .HasColumnType("uuid")
                        .HasColumnName("BeachTypeId");

                    b.Property<Guid>("SecondId")
                        .HasColumnType("uuid")
                        .HasColumnName("HotelId");

                    b.HasKey("FirstId", "SecondId");

                    b.HasIndex("SecondId");

                    b.ToTable("BeachTypeHotels");
                });

            modelBuilder.Entity("AnytourApi.Domain.Models.Relations.DietTypeHotel", b =>
                {
                    b.Property<Guid>("FirstId")
                        .HasColumnType("uuid")
                        .HasColumnName("DietTypeId");

                    b.Property<Guid>("SecondId")
                        .HasColumnType("uuid")
                        .HasColumnName("HotelId");

                    b.HasKey("FirstId", "SecondId");

                    b.HasIndex("SecondId");

                    b.ToTable("DietTypeHotels");
                });

            modelBuilder.Entity("AnytourApi.Domain.Models.Relations.FavoriteTour", b =>
                {
                    b.Property<Guid>("FirstId")
                        .HasColumnType("uuid")
                        .HasColumnName("TourId");

                    b.Property<Guid>("SecondId")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId");

                    b.HasKey("FirstId", "SecondId");

                    b.HasIndex("SecondId");

                    b.ToTable("FavoriteTours");
                });

            modelBuilder.Entity("AnytourApi.Domain.Models.Relations.ForKidHotel", b =>
                {
                    b.Property<Guid>("FirstId")
                        .HasColumnType("uuid")
                        .HasColumnName("ForKidId");

                    b.Property<Guid>("SecondId")
                        .HasColumnType("uuid")
                        .HasColumnName("HotelId");

                    b.HasKey("FirstId", "SecondId");

                    b.HasIndex("SecondId");

                    b.ToTable("ForKidHotels");
                });

            modelBuilder.Entity("AnytourApi.Domain.Models.Relations.ForSportHotel", b =>
                {
                    b.Property<Guid>("FirstId")
                        .HasColumnType("uuid")
                        .HasColumnName("ForSportId");

                    b.Property<Guid>("SecondId")
                        .HasColumnType("uuid")
                        .HasColumnName("HotelId");

                    b.HasKey("FirstId", "SecondId");

                    b.HasIndex("SecondId");

                    b.ToTable("ForSportHotels");
                });

            modelBuilder.Entity("AnytourApi.Domain.Models.Relations.InHotelHotel", b =>
                {
                    b.Property<Guid>("FirstId")
                        .HasColumnType("uuid")
                        .HasColumnName("InHotelId");

                    b.Property<Guid>("SecondId")
                        .HasColumnType("uuid")
                        .HasColumnName("HotelId");

                    b.HasKey("FirstId", "SecondId");

                    b.HasIndex("SecondId");

                    b.ToTable("InHotelHotels");
                });

            modelBuilder.Entity("AnytourApi.Domain.Models.Relations.InRoomHotel", b =>
                {
                    b.Property<Guid>("FirstId")
                        .HasColumnType("uuid")
                        .HasColumnName("InRoomId");

                    b.Property<Guid>("SecondId")
                        .HasColumnType("uuid")
                        .HasColumnName("HotelId");

                    b.HasKey("FirstId", "SecondId");

                    b.HasIndex("SecondId");

                    b.ToTable("InRoomHotels");
                });

            modelBuilder.Entity("AnytourApi.Domain.Models.Relations.OrderActivity", b =>
                {
                    b.Property<Guid>("FirstId")
                        .HasColumnType("uuid")
                        .HasColumnName("OrderId");

                    b.Property<Guid>("SecondId")
                        .HasColumnType("uuid")
                        .HasColumnName("ActivityId");

                    b.HasKey("FirstId", "SecondId");

                    b.HasIndex("SecondId");

                    b.ToTable("OrderActivities");
                });

            modelBuilder.Entity("AnytourApi.Domain.Models.Relations.RoomTypeHotel", b =>
                {
                    b.Property<Guid>("FirstId")
                        .HasColumnType("uuid")
                        .HasColumnName("RoomTypeId");

                    b.Property<Guid>("SecondId")
                        .HasColumnType("uuid")
                        .HasColumnName("HotelId");

                    b.HasKey("FirstId", "SecondId");

                    b.HasIndex("SecondId");

                    b.ToTable("RoomTypeHotels");
                });

            modelBuilder.Entity("AnytourApi.Domain.Models.Relations.TourActivity", b =>
                {
                    b.Property<Guid>("FirstId")
                        .HasColumnType("uuid")
                        .HasColumnName("TourId");

                    b.Property<Guid>("SecondId")
                        .HasColumnType("uuid")
                        .HasColumnName("ActivityId");

                    b.HasKey("FirstId", "SecondId");

                    b.HasIndex("SecondId");

                    b.ToTable("TourActivities");
                });

            modelBuilder.Entity("AnytourApi.Domain.Models.Shared.Photoable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Photoable");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("AnytourApi.Domain.Models.Shared.Reviewable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Reviewable");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("AnytourApi.Domain.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("DietTypeHotel", b =>
                {
                    b.Property<Guid>("DietTypesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("HotelsId")
                        .HasColumnType("uuid");

                    b.HasKey("DietTypesId", "HotelsId");

                    b.HasIndex("HotelsId");

                    b.ToTable("DietTypeHotel");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("2ae998d7-d8b1-4616-a0b3-60d29eca6c90"),
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("b1e76313-b130-44f8-ae76-6aff097064aa"),
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AnytourApi.Domain.Models.Shared.ReviewablePhotoable", b =>
                {
                    b.HasBaseType("AnytourApi.Domain.Models.Shared.Photoable");

                    b.ToTable("ReviewablePhotoable");
                });

            modelBuilder.Entity("AnytourApi.Domain.Models.Enteties.Activity", b =>
                {
                    b.HasBaseType("AnytourApi.Domain.Models.Shared.ReviewablePhotoable");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(4096)
                        .HasColumnType("character varying(4096)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.HasIndex("CountryId");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("AnytourApi.Domain.Models.Enteties.Hotel", b =>
                {
                    b.HasBaseType("AnytourApi.Domain.Models.Shared.ReviewablePhotoable");

                    b.Property<int>("AdditionCostPerPerson")
                        .HasColumnType("integer");

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(4096)
                        .HasColumnType("character varying(4096)");

                    b.Property<string>("DescriptionForBeachTypes")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("DescriptionForInHotels")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("DescriptionForKids")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("DescriptionForSports")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("DescriptionLocation")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<int>("HowManyRooms")
                        .HasColumnType("integer");

                    b.Property<double>("Latitud")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitud")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<int>("PricePerNight")
                        .HasColumnType("integer");

                    b.Property<int>("Stars")
                        .HasColumnType("integer");

                    b.Property<long?>("TurpravdaId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TurpravdaScore")
                        .HasColumnType("integer");

                    b.Property<string>("WebSiteUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.HasIndex("CityId");

                    b.ToTable("Hotels");
                });

            modelBuilder.Entity("AnytourApi.Domain.Models.Enteties.Tour", b =>
                {
                    b.HasBaseType("AnytourApi.Domain.Models.Shared.ReviewablePhotoable");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(4096)
                        .HasColumnType("character varying(4096)");

                    b.Property<Guid>("DietTypeId")
                        .HasColumnType("uuid");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<Guid>("FromCityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("HotelId")
                        .HasColumnType("uuid");

                    b.Property<int>("HowManyAdults")
                        .HasColumnType("integer");

                    b.Property<int>("HowManyKids")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<int>("PriceUSD")
                        .HasColumnType("integer");

                    b.Property<Guid>("RoomTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ToCityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TransportationTypeId")
                        .HasColumnType("uuid");

                    b.HasIndex("DietTypeId");

                    b.HasIndex("FromCityId");

                    b.HasIndex("HotelId");

                    b.HasIndex("RoomTypeId");

                    b.HasIndex("ToCityId");

                    b.HasIndex("TransportationTypeId");

                    b.ToTable("Tours");
                });

            modelBuilder.Entity("AnytourApi.Domain.Models.Enteties.City", b =>
                {
                    b.HasOne("AnytourApi.Domain.Models.Enteties.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("AnytourApi.Domain.Models.Enteties.Order", b =>
                {
                    b.HasOne("AnytourApi.Domain.Models.User", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminId");

                    b.HasOne("AnytourApi.Domain.Models.Enteties.DietType", "DietType")
                        .WithMany()
                        .HasForeignKey("DietTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AnytourApi.Domain.Models.Enteties.City", "FromCity")
                        .WithMany()
                        .HasForeignKey("FromCityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AnytourApi.Domain.Models.Enteties.Hotel", "Hotel")
                        .WithMany()
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AnytourApi.Domain.Models.Enteties.OrderStatus", "OrderStatus")
                        .WithMany()
                        .HasForeignKey("OrderStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AnytourApi.Domain.Models.Enteties.RoomType", "RoomType")
                        .WithMany()
                        .HasForeignKey("RoomTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AnytourApi.Domain.Models.Enteties.City", "ToCity")
                        .WithMany()
                        .HasForeignKey("ToCityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AnytourApi.Domain.Models.Enteties.TransportationType", "TransportationType")
                        .WithMany()
                        .HasForeignKey("TransportationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AnytourApi.Domain.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Admin");

                    b.Navigation("DietType");

                    b.Navigation("FromCity");

                    b.Navigation("Hotel");

                    b.Navigation("OrderStatus");

                    b.Navigation("RoomType");

                    b.Navigation("ToCity");

                    b.Navigation("TransportationType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AnytourApi.Domain.Models.Enteties.Photo", b =>
                {
                    b.HasOne("AnytourApi.Domain.Models.Shared.Photoable", null)
                        .WithMany("Photos")
                        .HasForeignKey("PhotoableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AnytourApi.Domain.Models.Enteties.ProcessedOrder", b =>
                {
                    b.HasOne("AnytourApi.Domain.Models.Enteties.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AnytourApi.Domain.Models.Enteties.OrderStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AnytourApi.Domain.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AnytourApi.Domain.Models.Enteties.Review", b =>
                {
                    b.HasOne("AnytourApi.Domain.Models.Shared.Reviewable", null)
                        .WithMany("Reviews")
                        .HasForeignKey("ReviewableId");

                    b.HasOne("AnytourApi.Domain.Models.Shared.ReviewablePhotoable", null)
                        .WithMany("Reviews")
                        .HasForeignKey("ReviewablePhotoableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AnytourApi.Domain.Models.Relations.BeachTypeHotel", b =>
                {
                    b.HasOne("AnytourApi.Domain.Models.Enteties.BeachType", "First")
                        .WithMany()
                        .HasForeignKey("FirstId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AnytourApi.Domain.Models.Enteties.Hotel", "Second")
                        .WithMany()
                        .HasForeignKey("SecondId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("First");

                    b.Navigation("Second");
                });

            modelBuilder.Entity("AnytourApi.Domain.Models.Relations.DietTypeHotel", b =>
                {
                    b.HasOne("AnytourApi.Domain.Models.Enteties.DietType", "First")
                        .WithMany()
                        .HasForeignKey("FirstId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AnytourApi.Domain.Models.Enteties.Hotel", "Second")
                        .WithMany()
                        .HasForeignKey("SecondId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("First");

                    b.Navigation("Second");
                });

            modelBuilder.Entity("AnytourApi.Domain.Models.Relations.FavoriteTour", b =>
                {
                    b.HasOne("AnytourApi.Domain.Models.Enteties.Tour", "First")
                        .WithMany()
                        .HasForeignKey("FirstId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AnytourApi.Domain.Models.User", "Second")
                        .WithMany()
                        .HasForeignKey("SecondId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("First");

                    b.Navigation("Second");
                });

            modelBuilder.Entity("AnytourApi.Domain.Models.Relations.ForKidHotel", b =>
                {
                    b.HasOne("AnytourApi.Domain.Models.Enteties.ForKid", "First")
                        .WithMany()
                        .HasForeignKey("FirstId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AnytourApi.Domain.Models.Enteties.Hotel", "Second")
                        .WithMany()
                        .HasForeignKey("SecondId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("First");

                    b.Navigation("Second");
                });

            modelBuilder.Entity("AnytourApi.Domain.Models.Relations.ForSportHotel", b =>
                {
                    b.HasOne("AnytourApi.Domain.Models.Enteties.ForSport", "First")
                        .WithMany()
                        .HasForeignKey("FirstId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AnytourApi.Domain.Models.Enteties.Hotel", "Second")
                        .WithMany()
                        .HasForeignKey("SecondId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("First");

                    b.Navigation("Second");
                });

            modelBuilder.Entity("AnytourApi.Domain.Models.Relations.InHotelHotel", b =>
                {
                    b.HasOne("AnytourApi.Domain.Models.Enteties.InHotel", "First")
                        .WithMany()
                        .HasForeignKey("FirstId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AnytourApi.Domain.Models.Enteties.Hotel", "Second")
                        .WithMany()
                        .HasForeignKey("SecondId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("First");

                    b.Navigation("Second");
                });

            modelBuilder.Entity("AnytourApi.Domain.Models.Relations.InRoomHotel", b =>
                {
                    b.HasOne("AnytourApi.Domain.Models.Enteties.InRoom", "First")
                        .WithMany()
                        .HasForeignKey("FirstId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AnytourApi.Domain.Models.Enteties.Hotel", "Second")
                        .WithMany()
                        .HasForeignKey("SecondId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("First");

                    b.Navigation("Second");
                });

            modelBuilder.Entity("AnytourApi.Domain.Models.Relations.OrderActivity", b =>
                {
                    b.HasOne("AnytourApi.Domain.Models.Enteties.Order", "First")
                        .WithMany()
                        .HasForeignKey("FirstId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AnytourApi.Domain.Models.Enteties.Activity", "Second")
                        .WithMany()
                        .HasForeignKey("SecondId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("First");

                    b.Navigation("Second");
                });

            modelBuilder.Entity("AnytourApi.Domain.Models.Relations.RoomTypeHotel", b =>
                {
                    b.HasOne("AnytourApi.Domain.Models.Enteties.RoomType", "First")
                        .WithMany()
                        .HasForeignKey("FirstId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AnytourApi.Domain.Models.Enteties.Hotel", "Second")
                        .WithMany()
                        .HasForeignKey("SecondId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("First");

                    b.Navigation("Second");
                });

            modelBuilder.Entity("AnytourApi.Domain.Models.Relations.TourActivity", b =>
                {
                    b.HasOne("AnytourApi.Domain.Models.Enteties.Tour", "First")
                        .WithMany()
                        .HasForeignKey("FirstId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AnytourApi.Domain.Models.Enteties.Activity", "Second")
                        .WithMany()
                        .HasForeignKey("SecondId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("First");

                    b.Navigation("Second");
                });

            modelBuilder.Entity("DietTypeHotel", b =>
                {
                    b.HasOne("AnytourApi.Domain.Models.Enteties.DietType", null)
                        .WithMany()
                        .HasForeignKey("DietTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AnytourApi.Domain.Models.Enteties.Hotel", null)
                        .WithMany()
                        .HasForeignKey("HotelsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("AnytourApi.Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("AnytourApi.Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AnytourApi.Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("AnytourApi.Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AnytourApi.Domain.Models.Shared.ReviewablePhotoable", b =>
                {
                    b.HasOne("AnytourApi.Domain.Models.Shared.Photoable", null)
                        .WithOne()
                        .HasForeignKey("AnytourApi.Domain.Models.Shared.ReviewablePhotoable", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AnytourApi.Domain.Models.Enteties.Activity", b =>
                {
                    b.HasOne("AnytourApi.Domain.Models.Enteties.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AnytourApi.Domain.Models.Shared.ReviewablePhotoable", null)
                        .WithOne()
                        .HasForeignKey("AnytourApi.Domain.Models.Enteties.Activity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("AnytourApi.Domain.Models.Enteties.Hotel", b =>
                {
                    b.HasOne("AnytourApi.Domain.Models.Enteties.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AnytourApi.Domain.Models.Shared.ReviewablePhotoable", null)
                        .WithOne()
                        .HasForeignKey("AnytourApi.Domain.Models.Enteties.Hotel", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("AnytourApi.Domain.Models.Enteties.Tour", b =>
                {
                    b.HasOne("AnytourApi.Domain.Models.Enteties.DietType", "DietType")
                        .WithMany()
                        .HasForeignKey("DietTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AnytourApi.Domain.Models.Enteties.City", "FromCity")
                        .WithMany()
                        .HasForeignKey("FromCityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AnytourApi.Domain.Models.Enteties.Hotel", "Hotel")
                        .WithMany()
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AnytourApi.Domain.Models.Shared.ReviewablePhotoable", null)
                        .WithOne()
                        .HasForeignKey("AnytourApi.Domain.Models.Enteties.Tour", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AnytourApi.Domain.Models.Enteties.RoomType", "RoomType")
                        .WithMany()
                        .HasForeignKey("RoomTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AnytourApi.Domain.Models.Enteties.City", "ToCity")
                        .WithMany()
                        .HasForeignKey("ToCityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AnytourApi.Domain.Models.Enteties.TransportationType", "TransportationType")
                        .WithMany()
                        .HasForeignKey("TransportationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DietType");

                    b.Navigation("FromCity");

                    b.Navigation("Hotel");

                    b.Navigation("RoomType");

                    b.Navigation("ToCity");

                    b.Navigation("TransportationType");
                });

            modelBuilder.Entity("AnytourApi.Domain.Models.Shared.Photoable", b =>
                {
                    b.Navigation("Photos");
                });

            modelBuilder.Entity("AnytourApi.Domain.Models.Shared.Reviewable", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("AnytourApi.Domain.Models.Shared.ReviewablePhotoable", b =>
                {
                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
